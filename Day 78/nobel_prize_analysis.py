# -*- coding: utf-8 -*-
"""Nobel_Prize_Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ti1HeXTBxmZb3P9ol2P_3ER-SYFU7c-9

# Setup and Context

### Introduction

On November 27, 1895, Alfred Nobel signed his last will in Paris. When it was opened after his death, the will caused a lot of controversy, as Nobel had left much of his wealth for the establishment of a prize.

Alfred Nobel dictates that his entire remaining estate should be used to endow “prizes to those who, during the preceding year, have conferred the greatest benefit to humankind”.

Every year the Nobel Prize is given to scientists and scholars in the categories chemistry, literature, physics, physiology or medicine, economics, and peace. 

<img src=https://i.imgur.com/36pCx5Q.jpg>

Let's see what patterns we can find in the data of the past Nobel laureates. What can we learn about the Nobel prize and our world more generally?

### Upgrade plotly (only Google Colab Notebook)

Google Colab may not be running the latest version of plotly. If you're working in Google Colab, uncomment the line below, run the cell, and restart your notebook server.
"""

# %pip install --upgrade plotly

"""### Import Statements"""

import pandas as pd
import numpy as np
import plotly.express as px
import seaborn as sns
import matplotlib.pyplot as plt

"""### Notebook Presentation"""

pd.options.display.float_format = '{:,.2f}'.format

"""### Read the Data"""

df_data = pd.read_csv('nobel_prize_data.csv')

"""Caveats: The exact birth dates for Michael Houghton, Venkatraman Ramakrishnan, and Nadia Murad are unknown. I've substituted them with mid-year estimate of July 2nd.

# Data Exploration & Cleaning

**Challenge**: Preliminary data exploration. 
* What is the shape of `df_data`? How many rows and columns?
* What are the column names?
* In which year was the Nobel prize first awarded?
* Which year is the latest year included in the dataset?
"""

df_data.shape

df_data.columns

df_data.year.min()

df_data.year.max()

"""**Challange**: 
* Are there any duplicate values in the dataset?
* Are there NaN values in the dataset?
* Which columns tend to have NaN values?
* How many NaN values are there per column? 
* Why do these columns have NaN values?

### Check for Duplicates
"""

df_data.duplicated(['year', 'full_name', 'prize']).values.any()

"""### Check for NaN Values"""

df_data.isna().values.any()

df_data.isna().sum()

col_subset = ['year','category', 'laureate_type',
              'birth_date','full_name', 'organization_name']
df_data.loc[df_data.birth_date.isna()][col_subset]  # doing this we see when an organization wins the nobel prize, the name is placed in full_name instead of organization_name, and they have no birth_date

col_subset = ['year','category', 'laureate_type','full_name', 'organization_name']
df_data.loc[df_data.organization_name.isna()][col_subset]  # here we also see many people who did not belong to organizations won the nobel peace prize

"""### Type Conversions

**Challenge**: 
* Convert the `birth_date` column to Pandas `Datetime` objects
* Add a Column called `share_pct` which has the laureates' share as a percentage in the form of a floating-point number.

#### Convert Year and Birth Date to Datetime and Add a Column with the Prize Share as a Percentage
"""

df_data.birth_date = pd.to_datetime(df_data.birth_date)

seperated_values = df_data.prize_share.str.split('/', expand=True)  # the data is saved as a fraction, eg: '1/2', split it into numerator and denomenator integers
numerator = pd.to_numeric(seperated_values[0])  # they are still str so we need to turn them into ints
denomenator = pd.to_numeric(seperated_values[1])
df_data['share_pct'] = (numerator / denomenator) * 100  # divide the two values and multiply by 100 to get percentages

df_data.share_pct.head()  # check if it worked

"""# Plotly Donut Chart: Percentage of Male vs. Female Laureates

**Challenge**: Create a [donut chart using plotly](https://plotly.com/python/pie-charts/) which shows how many prizes went to men compared to how many prizes went to women. What percentage of all the prizes went to women?
"""

prizes_vs_sex = df_data.sex.value_counts()

fig = px.pie(
    df_data,
    values=prizes_vs_sex.values,  # the values to put on the chart
    labels=prizes_vs_sex.index,  # labels for each value
    hole=0.3,  # hole size (0.3 = 30%)
    title='Percentage of Male vs Female Winners',
    names=prizes_vs_sex.index  # legend
)

fig.update_traces(
    textposition='inside',  # places the % text in the region it represents
    textfont_size=15,
    textinfo='percent',  # specifies the data is percent
)

fig.show()

"""# Who were the first 3 Women to Win the Nobel Prize?

**Challenge**: 
* What are the names of the first 3 female Nobel laureates? 
* What did the win the prize for? 
* What do you see in their `birth_country`? Were they part of an organisation?
"""

df_data[df_data.sex == 'Female'].sort_values('year').head(3)

"""# Find the Repeat Winners

**Challenge**: Did some people get a Nobel Prize more than once? If so, who were they? 
"""

repeat_winners = df_data[df_data.duplicated(['full_name'], keep=False)]  # filter dataframe only for sets where duplicated name is true, keep=False counts all duplicates without excluding first/last
repeat_winners.full_name.nunique()

col_subset = ['year', 'category', 'laureate_type', 'full_name']
repeat_winners[col_subset]

"""# Number of Prizes per Category

**Challenge**: 
* In how many categories are prizes awarded? 
* Create a plotly bar chart with the number of prizes awarded by category. 
* Use the color scale called `Aggrnyl` to colour the chart, but don't show a color axis.
* Which category has the most number of prizes awarded? 
* Which category has the fewest number of prizes awarded? 
"""

df_data.category.nunique()  # number of unique categories

prizes_per_category = df_data.category.value_counts()

fig2 = px.bar(
    x = prizes_per_category.index,
    y = prizes_per_category.values,
    color = prizes_per_category.values,
    color_continuous_scale='Aggrnyl',
    title='Number of Prizes Awarded per Category'
)

fig2.update_layout(
    xaxis_title='Nobel Prize Category',
    coloraxis_showscale=False,
    yaxis_title = 'Number of Prizes'
)

fig2.show()

"""**Challenge**: 
* When was the first prize in the field of Economics awarded?
* Who did the prize go to?
"""

df_data[df_data.category == 'Economics'].sort_values('year').head(1)

"""# Male and Female Winners by Category

**Challenge**: Create a [plotly bar chart](https://plotly.com/python/bar-charts/) that shows the split between men and women by category. 
* Hover over the bar chart. How many prizes went to women in Literature compared to Physics?

<img src=https://i.imgur.com/od8TfOp.png width=650>
"""

winner_genders_by_category =  df_data.groupby(['category', 'sex'], as_index=False).agg({'prize': pd.Series.count})

winner_genders_by_category.sort_values('prize', ascending=False, inplace=True)

fig3 = px.bar(
    x = winner_genders_by_category.category,
    y = winner_genders_by_category.prize,
    color = winner_genders_by_category.sex,
    title='Number of Prizes Awarded per Category split by Men/Women'
)

fig3.update_layout(
    xaxis_title='Nobel Prize Category',
    yaxis_title = 'Number of Prizes'
)

fig3.show()

"""# Number of Prizes Awarded Over Time

**Challenge**: Are more prizes awarded recently than when the prize was first created? Show the trend in awards visually. 
* Count the number of prizes awarded every year. 
* Create a 5 year rolling average of the number of prizes (Hint: see previous lessons analysing Google Trends).
* Using Matplotlib superimpose the rolling average on a scatter plot.
* Show a tick mark on the x-axis for every 5 years from 1900 to 2020. (Hint: you'll need to use NumPy). 

<img src=https://i.imgur.com/4jqYuWC.png width=650>

* Use the [named colours](https://matplotlib.org/3.1.0/gallery/color/named_colors.html) to draw the data points in `dogerblue` while the rolling average is coloured in `crimson`. 

<img src=https://i.imgur.com/u3RlcJn.png width=350>

* Looking at the chart, did the first and second world wars have an impact on the number of prizes being given out? 
* What could be the reason for the trend in the chart?

"""

prizes_per_year = df_data.groupby(by='year').count().prize 
prizes_per_year

rolled_prizes = prizes_per_year.rolling(5).mean()  # 5 year rolling average

plt.figure(figsize=(12,7),dpi=100)

plt.scatter(x=prizes_per_year.index, 
           y=prizes_per_year.values, 
           c='dodgerblue',
           alpha=0.7,
           s=100,)
 
plt.plot(prizes_per_year.index, 
        rolled_prizes.values, 
        c='crimson', 
        linewidth=3,)
 
plt.show()

plt.figure(figsize=(12,6), dpi=150)

plt.title('Number of Nobel Prizes Awarded per Year', fontsize=18)

plt.yticks(fontsize=14)

plt.xticks(ticks=np.arange(1900, 2021, step=5), 
           fontsize=14, 
           rotation=45)
 
ax = plt.gca() # get current axis

ax.set_xlim(1900, 2020)
 
ax.scatter(
    x=prizes_per_year.index, 
    y=prizes_per_year.values, 
    c='dodgerblue',
    alpha=0.7,
    s=50
)
 
ax.plot(
    prizes_per_year.index, 
    rolled_prizes.values, 
    c='crimson', 
    linewidth=3
)
 
plt.show()

"""# Are More Prizes Shared Than Before?

**Challenge**: Investigate if more prizes are shared than before. 

* Calculate the average prize share of the winners on a year by year basis.
* Calculate the 5 year rolling average of the percentage share.
* Copy-paste the cell from the chart you created above.
* Modify the code to add a secondary axis to your Matplotlib chart.
* Plot the rolling average of the prize share on this chart. 
* See if you can invert the secondary y-axis to make the relationship even more clear. 
"""

prize_share_by_year = df_data.groupby('year').mean().share_pct  # can also do .agg({'share_pct': pd.Series.mean})
prize_share_by_year

rolled_prize_share = prize_share_by_year.rolling(5).mean()

plt.figure(figsize=(12,6), dpi=150)

plt.title('Number of Nobel Prizes Awarded per Year', fontsize=18)

plt.yticks(fontsize=14)

plt.xticks(ticks=np.arange(1900, 2021, step=5), 
           fontsize=14, 
           rotation=45)
 
ax1 = plt.gca() # get current axis
ax2 = ax1.twinx()
ax1.set_xlim(1900, 2020)

ax1.scatter(
    x=prizes_per_year.index, 
    y=prizes_per_year.values, 
    c='dodgerblue',
    alpha=0.7,
    s=50
)
 
ax1.plot(
    prizes_per_year.index, 
    rolled_prizes.values, 
    c='crimson', 
    linewidth=3
)

# add 2nd axes

ax2.plot(
    prizes_per_year.index,
    rolled_prize_share.values,
    c='grey',
    linewidth=3
)
 
plt.show()

"""# The Countries with the Most Nobel Prizes

**Challenge**: 
* Create a Pandas DataFrame called `top20_countries` that has the two columns. The `prize` column should contain the total number of prizes won. 

<img src=https://i.imgur.com/6HM8rfB.png width=350>

* Is it best to use `birth_country`, `birth_country_current` or `organization_country`? 
* What are some potential problems when using `birth_country` or any of the others? Which column is the least problematic? 
* Then use plotly to create a horizontal bar chart showing the number of prizes won by each country. Here's what you're after:

<img src=https://i.imgur.com/agcJdRS.png width=750>

* What is the ranking for the top 20 countries in terms of the number of prizes?
"""

# as_index lets it retain it's column name, then we count the prizes for each country
# we use agg instead of .count().prize because we want the prize column to also retain it's column name, not just data to plot on a graph

# using birth_country_current is the least problematic because it does not include countries that no longer exist like birth_countries, and there are far more individuals without an organization
# than organizations that will be left out if we use organization_country

top20_countries = df_data.groupby(['birth_country_current'], as_index=False).agg({'prize':pd.Series.count})
top20_countries.sort_values('prize', inplace=True)
top20_countries = top20_countries[-20:]  # so the bar chart is graphed from biggest to smallest, we could do ascending=True but it will be upside down
top20_countries

plt.figure(dpi=150)

fig4 = px.bar(
    x=top20_countries.prize,
    y=top20_countries.birth_country_current,
    orientation='h',
    color=top20_countries.prize,
    color_continuous_scale='Viridis',
    title='Top 20 Countries by Number of Prizes'
    
)

fig4.update_layout(
    xaxis_title='Number of Prizes', 
    yaxis_title='Country',
    coloraxis_showscale=False
)

fig4.show()

"""# Use a Choropleth Map to Show the Number of Prizes Won by Country

* Create this choropleth map using [the plotly documentation](https://plotly.com/python/choropleth-maps/):

<img src=https://i.imgur.com/s4lqYZH.png>

* Experiment with [plotly's available colours](https://plotly.com/python/builtin-colorscales/). I quite like the sequential colour `matter` on this map. 

Hint: You'll need to use a 3 letter country code for each country. 

"""

df_countries = df_data.groupby(['birth_country_current', 'ISO'], as_index=False).agg({'prize': pd.Series.count})  # we need to get the ISO codes as well in order to use choropleths

df_countries.sort_values('prize', ascending=False, inplace=True)

world_map = px.choropleth(df_countries,
                          locations='ISO',
                          color='prize', 
                          hover_name='birth_country_current', 
                          color_continuous_scale=px.colors.sequential.matter)
 
world_map.update_layout(coloraxis_showscale=True,)
 
world_map.show()

"""# In Which Categories are the Different Countries Winning Prizes? 

**Challenge**: See if you can divide up the plotly bar chart you created above to show the which categories made up the total number of prizes. Here's what you're aiming for:

<img src=https://i.imgur.com/iGaIKCL.png>

* In which category are Germany and Japan the weakest compared to the United States?
* In which category does Germany have more prizes than the UK?
* In which categories does France have more prizes than Germany?
* Which category makes up most of Australia's nobel prizes?
* Which category makes up half of the prizes in the Netherlands?
* Does the United States have more prizes in Economics than all of France? What about in Physics or Medicine?


The hard part is preparing the data for this chart! 


*Hint*: Take a two-step approach. The first step is grouping the data by country and category. Then you can create a DataFrame that looks something like this:

<img src=https://i.imgur.com/VKjzKa1.png width=450>

"""

categories_per_country = df_data.groupby(['birth_country_current', 'category'], as_index=False).agg({'prize': pd.Series.count})
categories_per_country.sort_values(by='prize', ascending=False, inplace=True)

merged_df = pd.merge(categories_per_country, top20_countries, on='birth_country_current')

merged_df.columns = ['birth_country_current', 'category', 'cat_prize', 'total_prize']

merged_df.sort_values('total_prize', inplace=True)

fig5 = px.bar(
    x=merged_df.cat_prize,
    y=merged_df.birth_country_current,
    color=merged_df.category,
    orientation='h',
    title='Top 20 Countries by Number of Prizes and Category'
)
 
fig5.update_layout(
    xaxis_title='Number of Prizes', 
    yaxis_title='Country'
)

fig5.show()

"""### Number of Prizes Won by Each Country Over Time

* When did the United States eclipse every other country in terms of the number of prizes won? 
* Which country or countries were leading previously?
* Calculate the cumulative number of prizes won by each country in every year. Again, use the `birth_country_current` of the winner to calculate this. 
* Create a [plotly line chart](https://plotly.com/python/line-charts/) where each country is a coloured line. 
"""

# number of prizes by year and country
prize_by_year = df_data.groupby(by=['birth_country_current', 'year'], as_index=False).count()
prize_by_year = prize_by_year.sort_values('year')[['year', 'birth_country_current', 'prize']]

# now create a series that has the cumulative sum for prizes won

cumulative_prizes = prize_by_year.groupby(by=['birth_country_current', 'year']).sum().groupby(level=[0]).cumsum()
cumulative_prizes.reset_index(inplace=True)

fig6 = px.line(
    cumulative_prizes,
    x='year', 
    y='prize',
    color='birth_country_current',
    hover_name='birth_country_current'
)
 
fig6.update_layout(
    xaxis_title='Year',
    yaxis_title='Number of Prizes'
)
 
fig6.show()

"""# What are the Top Research Organisations?

**Challenge**: Create a bar chart showing the organisations affiliated with the Nobel laureates. It should looks something like this:

<img src=https://i.imgur.com/zZihj2p.png width=600>

* Which organisations make up the top 20?
* How many Nobel prize winners are affiliated with the University of Chicago and Harvard University?
"""

top20_orgs = df_data.organization_name.value_counts()[:20]
top20_orgs.sort_values(inplace=True, ascending=True)  # so the bar chart is biggest to smallest from top to bottom

plt.figure(dpi=150)

fig7 = px.bar(
    x=top20_orgs.values,
    y=top20_orgs.index,
    orientation='h',
    color=top20_orgs.values,
    color_continuous_scale='Viridis',
    title='Top 20 Organizations by Number of Prizes'
    
)

fig7.update_layout(
    xaxis_title='Number of Prizes',
    yaxis_title='Organization',
    coloraxis_showscale=False
)

fig7.show()

"""# Which Cities Make the Most Discoveries? 

Where do major discoveries take place?  

**Challenge**: 
* Create another plotly bar chart graphing the top 20 organisation cities of the research institutions associated with a Nobel laureate. 
* Where is the number one hotspot for discoveries in the world?
* Which city in Europe has had the most discoveries?
"""

top20_org_cities = df_data.organization_city.value_counts()[:20]
top20_org_cities.sort_values(inplace=True, ascending=True)

plt.figure(dpi=150)

fig8 = px.bar(
    x=top20_org_cities.values,
    y=top20_org_cities.index,
    orientation='h',
    color=top20_org_cities.values,
    color_continuous_scale='Viridis',
    title='Top 20 Organizations Cities by Number of Prizes'
    
)

fig8.update_layout(
    xaxis_title='Number of Prizes',
    yaxis_title='Organization City',
    coloraxis_showscale=False
)

fig8.show()

"""# Where are Nobel Laureates Born? Chart the Laureate Birth Cities 

**Challenge**: 
* Create a plotly bar chart graphing the top 20 birth cities of Nobel laureates. 
* Use a named colour scale called `Plasma` for the chart.
* What percentage of the United States prizes came from Nobel laureates born in New York? 
* How many Nobel laureates were born in London, Paris and Vienna? 
* Out of the top 5 cities, how many are in the United States?

"""

top20_birth_cities = df_data.birth_city.value_counts()[:20]
top20_birth_cities.sort_values(inplace=True, ascending=True)

plt.figure(dpi=150)

fig9 = px.bar(
    x=top20_birth_cities.values,
    y=top20_birth_cities.index,
    orientation='h',
    color=top20_birth_cities.values,
    color_continuous_scale='Plasma',
    title='Top 20 Birth Cities by Number of Prizes'
    
)

fig9.update_layout(
    xaxis_title='Number of Prizes',
    yaxis_title='Birth City',
    coloraxis_showscale=False
)

fig9.show()

"""# Plotly Sunburst Chart: Combine Country, City, and Organisation

**Challenge**: 

* Create a DataFrame that groups the number of prizes by organisation. 
* Then use the [plotly documentation to create a sunburst chart](https://plotly.com/python/sunburst-charts/)
* Click around in your chart, what do you notice about Germany and France? 


Here's what you're aiming for:

<img src=https://i.imgur.com/cemX4m5.png width=300>


"""

# dataframe with all organization data and grouped by number of prizes

country_city_org = df_data.groupby(by=['organization_country', 'organization_city', 'organization_name'], as_index=False).agg({'prize': pd.Series.count})
country_city_org.sort_values('prize', ascending=False, inplace=True)

burst = px.sunburst(
    country_city_org, 
    path=['organization_country', 'organization_city', 'organization_name'], 
    values='prize',
    title='Where do the Most Discoveries Take Place?',
)
 
burst.update_layout(
    xaxis_title='Number of Prizes', 
    yaxis_title='City',
    coloraxis_showscale=False)
 
burst.show()

"""# Patterns in the Laureate Age at the Time of the Award

How Old Are the Laureates When the Win the Prize?

**Challenge**: Calculate the age of the laureate in the year of the ceremony and add this as a column called `winning_age` to the `df_data` DataFrame. Hint: you can use [this](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.dt.html) to help you. 


"""

birth_years = df_data.birth_date.dt.year  # dt means datetime, same as str and string because .year is a datetime method

df_data['winning_age'] = df_data.year - birth_years

"""### Who were the oldest and youngest winners?

**Challenge**: 
* What are the names of the youngest and oldest Nobel laureate? 
* What did they win the prize for?
"""

display(df_data.nlargest(n=1, columns='winning_age'))
display(df_data.nsmallest(n=1, columns='winning_age'))

"""### Descriptive Statistics for the Laureate Age at Time of Award

* Calculate the descriptive statistics for the age at the time of the award.
* What is the average age of a winner?
* 75% of laureates are younger than what age when they receive the prize? 
* Then visualise the distribution in the form of a histogram using [Seaborn's .histplot() function](https://seaborn.pydata.org/generated/seaborn.histplot.html).
* Experiment with the `bin` size. Try 10, 20, 30, and 50.  
"""

df_data.describe()

plt.figure(figsize=(8, 4), dpi=200)
sns.histplot(data=df_data,
             x=df_data.winning_age,
             bins=30)
plt.xlabel('Age')
plt.title('Distribution of Age on Receipt of Prize')
plt.show()

"""### Age at Time of Award throughout History

Are Nobel laureates being nominated later in life than before? Have the ages of laureates at the time of the award increased or decreased over time?

**Challenge**

* Use Seaborn to [create a .regplot](https://seaborn.pydata.org/generated/seaborn.regplot.html?highlight=regplot#seaborn.regplot) with a trendline.
* Set the `lowess` parameter to `True` to show a moving average of the linear fit.
* According to the best fit line, how old were Nobel laureates in the years 1900-1940 when they were awarded the prize?
* According to the best fit line, what age would it predict for a Nobel laureate in 2020?

"""

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style("whitegrid"):
    sns.regplot(data=df_data,
                x='year',
                y='winning_age',
                lowess=True, 
                scatter_kws = {'alpha': 0.4},
                line_kws={'color': 'black'})
 
plt.show()

"""Lowess allows us to plot linear regression, from it we can see that in 1940 laureates were about 55 years old from 1900-1940 when they got their nobel prizes. It also predicts a nobel prize winner in 2020 would be around 70 years old.

### Winning Age Across the Nobel Prize Categories

How does the age of laureates vary by category? 

* Use Seaborn's [`.boxplot()`](https://seaborn.pydata.org/generated/seaborn.boxplot.html?highlight=boxplot#seaborn.boxplot) to show how the mean, quartiles, max, and minimum values vary across categories. Which category has the longest "whiskers"? 
* In which prize category are the average winners the oldest?
* In which prize category are the average winners the youngest?
"""

plt.figure(figsize=(8,4), dpi=200)
with sns.axes_style("whitegrid"):
    sns.boxplot(data=df_data,
                x='category',
                y='winning_age')
 
plt.show()

"""Average winners are oldest in Literature. Average winners are youngest in physics.

**Challenge**
* Now use Seaborn's [`.lmplot()`](https://seaborn.pydata.org/generated/seaborn.lmplot.html?highlight=lmplot#seaborn.lmplot) and the `row` parameter to create 6 separate charts for each prize category. Again set `lowess` to `True`.
* What are the winning age trends in each category? 
* Which category has the age trending up and which category has the age trending down? 
* Is this `.lmplot()` telling a different story from the `.boxplot()`?
* Create another chart with Seaborn. This time use `.lmplot()` to put all 6 categories on the same chart using the `hue` parameter.
"""

with sns.axes_style('whitegrid'):
    sns.lmplot(data=df_data,
               x='year', 
               y='winning_age',
               row = 'category',
               lowess=True, 
               aspect=2,
               scatter_kws = {'alpha': 0.6},
               line_kws = {'color': 'black'},)
 
plt.show()

# we can combine them all into the same chart with the hue parameter

with sns.axes_style("whitegrid"):
    sns.lmplot(data=df_data,
               x='year',
               y='winning_age',
               hue='category',
               lowess=True, 
               aspect=2,
               scatter_kws={'alpha': 0.5},
               line_kws={'linewidth': 5})
 
plt.show()